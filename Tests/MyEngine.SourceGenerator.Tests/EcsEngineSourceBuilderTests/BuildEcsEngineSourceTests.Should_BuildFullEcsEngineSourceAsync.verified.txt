// <auto-generated />
#nullable enable
#pragma warning disable CS0162 // Unreachable code detected

namespace MyEngine.Runtime
{
    public sealed class EcsEngineGlue : global::MyEngine.Core.Ecs.IEcsEngineGlue
    {
        private global::System.Collections.Generic.ISet<global::MyEngine.Core.Ecs.EntityId> _entities = null!;
        private global::MyEngine.Core.ComponentCollection _components = null!;
        private global::MyEngine.Core.Ecs.Resources.IResourceContainer _resourceContainer = null!;

        public void Init(
            global::System.Collections.Generic.ISet<global::MyEngine.Core.Ecs.EntityId> entities,
            global::MyEngine.Core.ComponentCollection components,
            global::MyEngine.Core.Ecs.Resources.IResourceContainer resourceContainer)
        {
            _entities = entities;
            _components = components;
            _resourceContainer = resourceContainer;
        }

        public global::MyEngine.Core.IAppEntrypoint GetAppEntrypoint() => new global::MyAppEntrypoint();

        public Dictionary<System.Type, Func<global::MyEngine.Core.Ecs.Systems.IStartupSystem?>> GetStartupSystemInstantiations()
        {
            var startupSystemInstantiations = new Dictionary<System.Type, Func<global::MyEngine.Core.Ecs.Systems.IStartupSystem?>>();

            startupSystemInstantiations.Add(typeof(global::MyStartupSystemClass1), () =>
            {
                if (_resourceContainer.TryGetResource<global::Resource1>(out var resource1)
                    && _resourceContainer.TryGetResource<global::Resource2>(out var resource2))
                {
                    return new global::MyStartupSystemClass1(resource1, resource2);
                }
                return null;
            });
            startupSystemInstantiations.Add(typeof(global::MyStartupSystemClass2), () =>
            {
                if (true)
                {
                    return new global::MyStartupSystemClass2();
                }
                return null;
            });

            return startupSystemInstantiations;
        }


        public Dictionary<System.Type, Func<global::MyEngine.Core.Ecs.Systems.ISystem?>> GetSystemInstantiations()
        {
            var systemInstantiations = new Dictionary<System.Type, Func<global::MyEngine.Core.Ecs.Systems.ISystem?>>();

            systemInstantiations.Add(typeof(global::MySystem1), () =>
            {
                
                if (_resourceContainer.TryGetResource<global::Resource1>(out var resource0)
                    && _resourceContainer.TryGetResource<global::Resource2>(out var resource1))
                {
                    return new global::MySystem1(
                        resource0,
                        resource1);
                }
                return null;
            });
            systemInstantiations.Add(typeof(global::MySystem2), () =>
            {
                
                if (true)
                {
                    return new global::MySystem2(
                        );
                }
                return null;
            });

            return systemInstantiations;
        }

        public IReadOnlyCollection<System.Type> GetAllStartupSystemTypes() =>
            new Type[]
            {
                typeof(global::MyStartupSystemClass1),
                typeof(global::MyStartupSystemClass2)
            };

        public IReadOnlyCollection<System.Type> GetAllSystemTypes() =>
            new Type[]
            {
                typeof(global::MySystem1),
                typeof(global::MySystem2)
            };

        public Dictionary<System.Type, System.Type[]> GetUninstantiatedStartupSystems() =>
            new ()
            {
                { typeof(global::MyStartupSystemClass1), new Type[] { typeof(global::Resource1), typeof(global::Resource2) } },
                { typeof(global::MyStartupSystemClass2), Array.Empty<Type>() }
            };

        public Dictionary<System.Type, System.Type[]> GetUninstantiatedSystems() =>
            new ()
            {
                { typeof(global::MySystem1), new Type[] { typeof(global::Resource1), typeof(global::Resource2) } },
                { typeof(global::MySystem2), Array.Empty<Type>() }
            };
    }
}

#pragma warning restore CS0162 // Unreachable code detected
#nullable restore
